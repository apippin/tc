#!/usr/bin/perl

use DBI;
use Getopt::Std;

$mydir = `cd \$(dirname $0) 2>/dev/null; pwd`; chomp($mydir);
unshift @INC,("$mydir/../setup");
if( -f "$mydir/../setup/db_config.local") { require "db_config.local"; }
else { require "db_config"; }

%hometeaching_data = ();
%membership_data = ();
getopts('vsn:o:');

$monthname2num{'Jan'} = '01';
$monthname2num{'Feb'} = '02';
$monthname2num{'Mar'} = '03';
$monthname2num{'Apr'} = '04';
$monthname2num{'May'} = '05';
$monthname2num{'Jun'} = '06';
$monthname2num{'Jul'} = '07';
$monthname2num{'Aug'} = '08';
$monthname2num{'Sep'} = '09';
$monthname2num{'Oct'} = '10';
$monthname2num{'Nov'} = '11';
$monthname2num{'Dec'} = '12';

######################################################################
# SUBROUTINES
######################################################################
sub csv_to_hash
{
	my ($filename, $hashref) = @_;

	open(FILE,$filename) || die "-E- Could not open $filename for reading\n";

	my $found_header = 0; my $index = 0;
	while(<FILE>) {
		$line = $_;
		@data = split /\",/, $line;
		if(!$found_header) { 
			@header = @data; 
			$found_header = 1; 
		} else {
			foreach $i (0..$#data-1) {
				$data[$i] =~ s/\"//g;
				$header[$i] =~ s/\"//g;
				$hashref->{$index}{$header[$i]} = $data[$i];
				#print "$index: $i: $header[$i]: $data[$i]\n";
			}
			$index++;
		}
	}

	close(FILE);
}

sub optional_csv_to_hash
{
	my ($filename, $hashref) = @_;

	my $opened = open(FILE,$filename);

	if ($opened) {
		my $found_header = 0; my $index = 0;
		while(<FILE>) {
			$line = $_;
			@data = split /\",/, $line;
			if(!$found_header) { 
				@header = @data; 
				$found_header = 1; 
			} else {
				foreach $i (0..$#data-1) {
					$data[$i] =~ s/\"//g;
					$header[$i] =~ s/\"//g;
					$hashref->{$index}{$header[$i]} = $data[$i];
					#print "$index: $i: $header[$i]: $data[$i]\n";
				}
				$index++;
			}
		}

		close(FILE);
	}
	else
	{
	print "-W- could not open optional csv file $filename\n";
	}
}

######################################################################
sub print_hash
{
	my ($hashref) = @_;

	foreach $key (sort {$a <=> $b} keys %$hashref) {
		print "Index: $key\n";
		foreach $field (keys %{$hashref->{$key}}) {
			print "$field: $hashref->{$key}{$field}\n";
		}
		print "\n";
	}
}

######################################################################

# TC_INDIVIDUAL
#+----------------------+------------------+------+-----+---------+----------------+
#| Field                | Type             | Null | Key | Default | Extra          |
#+----------------------+------------------+------+-----+---------+----------------+
#| individual           | int(16) unsigned |      | PRI | NULL    | auto_increment |
#| mls_id               | int(16) unsigned |      |     | NULL    |                |
#| name                 | varchar(60)      | YES  |     | NULL    |                |
#| phone                | varchar(12)      | YES  |     | NULL    |                |
#| email                | varchar(120)     | YES  |     | NULL    |                |
#| priesthood           | enum             | YES  |     | NULL    |                |
#| scheduling_priority  | int(10) unsigned | YES  |     | 30      |                |
#| attending            | tinyint(1)       | YES  |     | 0       |                |
#| valid                | tinyint(1)       | YES  |     | NULL    |                |
#+----------------------+------------------+------+-----+---------+----------------+
sub update_tc_individual_table
{
	print "\n-> Updating tc_individual table\n";

	# Set all records to be invalid. Only mark them as valid if they appear on the new list.
	$sth = $dbh->prepare("update tc_individual set valid=0");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";

	foreach $index (keys %membership_data)
	{
		$hashref = $membership_data{$index};
		$id = $membership_data{$index}{'Indiv ID'};
		$individual_name = $membership_data{$index}{'Preferred Name'};
		$address = $membership_data{$index}{'Street 1'};
		if($membership_data{$index}{'Street 2'} ne "") { 
			$address .= " " . $membership_data{$index}{'Street 2'};
		}
		$phone = $membership_data{$index}{'Household Phone'};
		$priesthood = $membership_data{$index}{'Priesthood'};
		$hhposition = $membership_data{$index}{'HH Position'};
		$steward = ""; # This will be set correctly in a later method
		# Set the default stewardship if the "Organization data per member.csv" isn't available.
		# Only validate priesthood holders that match the $default_stewardship since 
		# we don't have any other data available to us to make this call if we don't have the report.
		if((! -e "$datadir/Organization\ class\ per\ member.csv") && ($priesthood =~ /$default_stewardship/i)) { 
			$steward = "$default_stewardship";
		}
		$attending = 0;
		if(($organization =~ /Elders/) ||
		   ($organization =~ /Young Men/) ||
		   ($organization =~ /Sunday School/) ||
		   ($organization =~ /Primary/)
		  ) { $attending = 1; }
		if($phone =~ /(\d\d\d-\d\d\d\d)/) { $phone = "$areacode-$1"; }
		if($phone =~ /^\(\d\d\d\) (\d\d\d-\d\d\d\d)/) { $phone = "$1-$2"; }
		$email = $membership_data{$index}{'indiv E-mail'};
		if ($email eq "") { $email = $membership_data{$index}{'Household E-mail'}; }
		$sth = $dbh->prepare("select * from tc_individual where name=\"$individual_name\"");
		$sth->execute or die "-E- DB error: $DBI::errstr\n";
		my @data = ();
		while($sqlhashref = $sth->fetchrow_hashref) { push(@data, $sqlhashref); }
		my $rows = scalar @data;
		if($rows == 0) {
			# No existing records found for this individual, make a new entry
			print "   Adding new individual: $individual_name\n";
			$sth = $dbh->prepare("insert into tc_individual values (NULL,'$id',\"$individual_name\",'$address','$phone','$email','$hhposition','$priesthood','$steward',NULL,$attending,1)");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
		} elsif($rows == 1) {
			# An existing record was found for this individual, update it
			print "   Updating existing individual: $individual_name\n";
			$sth = $dbh->prepare("update tc_individual set valid=1 where name=\"$individual_name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			if($phone ne "") { 
				$sth = $dbh->prepare("update tc_individual set phone='$phone' where name=\"$individual_name\"");
			} else {
				$sth = $dbh->prepare("update tc_individual set phone=NULL where name=\"$individual_name\"");
			}
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			if($address ne "") { 
				$sth = $dbh->prepare("update tc_individual set address='$address' where name=\"$individual_name\"");
			} else {
				$sth = $dbh->prepare("update tc_individual set address=NULL where name=\"$individual_name\"");
			}
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			$sth = $dbh->prepare("update tc_individual set attending='$attending' where name=\"$individual_name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			$sth = $dbh->prepare("update tc_individual set mls_id='$id' where name=\"$individual_name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			$sth = $dbh->prepare("update tc_individual set priesthood='$priesthood' where name=\"$individual_name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			$sth = $dbh->prepare("update tc_individual set email='$email' where name=\"$individual_name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			$sth = $dbh->prepare("update tc_individual set hh_position='$hhposition' where name=\"$individual_name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
		} else {
			# More than one record was found. Error! This shouldn't happen.
			print "   -E- More than one record found ($rows) for individual: $individual_name\n";
		}
	}
	$sth->finish();
}

# TC_CALLING
#+--------------+------------------+------+-----+---------+-------+
#| Field        | Type             | Null | Key | Default | Extra |
#+--------------+------------------+------+-----+---------+-------+
#| name         | varchar(30)      | YES  |     | NULL    |       |
#| organization | varchar(30)      | YES  |     | NULL    |       |
#| position     | varchar(30)      | YES  |     | NULL    |       |
#| sustained    | date             | YES  |     | NULL    |       |
#+--------------+------------------+------+-----+---------+-------+
sub update_tc_calling_table()
{
	print "\n-> Updating tc_calling table\n";

	#print "-> Organization Data Dump\n\n";
	#&print_hash(\%organization_data);

	# Delete all records from the calling table. We have no history to
	# save here. Just re-populate with the latest calling information.
	$sth = $dbh->prepare("delete from tc_calling ");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";

	foreach $index (keys %organization_data)
	{
		$name = $organization_data{$index}{'Indiv Name'};
		$name =~ s/\'/\\'/g; #'
		$organization = $organization_data{$index}{'Organization'};
		$organization_by_name{$name} = $organization;
		$indiv_id = $organization_data{$index}{'Indiv ID'};
		$organization_by_id{$indiv_id} = $organization;
		$position = $organization_data{$index}{'Position'};
		$sustained = $organization_data{$index}{'Sustained'};
		$sustained =~ /(\S+) (\d+)/; $month=$1; $year=$2;
		if($name eq "") { next; }
		print "   Adding new Calling: $name -> $position\n";
		$sth = $dbh->prepare("insert into tc_calling values ('$name','$organization','$position','$month $year')");
		$sth->execute or die "-E- DB error: $DBI::errstr\n";
	}
}

# TC_COMPANIONSHIP
#+----------------------+------------------+------+-----+---------+-------+
#| Field                | Type             | Null | Key | Default | Extra |
#+----------------------+------------------+------+-----+---------+-------+
#| companionship        | int(16) unsigned |      |     | 0       |       |
#| individual           | int(16) unsigned | YES  |     | NULL    |       |
#| district             | int(16) unsigned | YES  |     | NULL    |       |
#| scheduling_priority  | int(10) unsigned | YES  |     | 30      |       |
#| valid                | tinyint(1)       | YES  |     | NULL    |       |
#+----------------------+------------------+------+-----+---------+-------+
sub update_tc_companionship_table
{
	print "\n-> Updating tc_companionship table\n";

	# First, mark all existing companionships as invalid in case they have been dissolved
	$sth = $dbh->prepare("update tc_companionship set valid=0");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";

	foreach $index (keys %hometeaching_data)
	{
		$hashref = $hometeaching_data{$index};
		foreach $key (keys %$hashref) {
			if($key =~ /Quorum/i && $hometeaching_data{$index}{$key} =~ /Elders/i) {
				foreach $field ("Home Teacher 1","Home Teacher 2") {
					$individual_name = $hometeaching_data{$index}{$field};
					if($individual_name eq "") { next; }
					$sth2 = $dbh->prepare("select * from tc_individual where name='$individual_name'");
					$sth2->execute or die "-E- DB error: $DBI::errstr\n";
					$sqlhashref2 = $sth2->fetchrow_hashref;
					$individual = $sqlhashref2->{individual};
					$id = $hometeaching_data{$index}{'Comp ID'};
					$district = $hometeaching_data{$index}{'HT District'};
					$sth = $dbh->prepare("select * from tc_companionship where individual='$individual' and companionship='$id'");
					$sth->execute or die "-E- DB error: $DBI::errstr\n";
					my @data = ();
					while($sqlhashref = $sth->fetchrow_hashref) { push(@data, $sqlhashref); }
					my $rows = scalar @data;
					if($rows == 0) {
						# No existing records found for this companionship, make a new entry
						print "   Adding Companion to companionship: $individual_name -> $id\n";
						$sth = $dbh->prepare("insert into tc_companionship values ($id,'$individual','$district',NULL,1)");
						$sth->execute or die "-E- DB error: $DBI::errstr\n";
					} else {
						# An existing companionship was found for this companionship, update it
						$sth2 = $dbh->prepare("select * from tc_companionship where district='$district' and companionship='$id'");
						$sth2->execute or die "-E- DB error: $DBI::errstr\n";
						print "   Updating Companionship with individual: $individual_name ($individual) -> $id\n";
						$sth = $dbh->prepare("update tc_companionship set district='$district' where individual='$individual' and companionship='$id'");
						$sth->execute or die "-E- DB error 'district': $DBI::errstr\n";
						$sth = $dbh->prepare("update tc_companionship set individual='$individual' where individual='$individual' and companionship='$id'");
						$sth->execute or die "-E- DB error 'individual': $DBI::errstr\n";
						$sth = $dbh->prepare("update tc_companionship set valid=1 where individual='$individual' and companionship='$id'");
						$sth->execute or die "-E- DB error 'valid': $DBI::errstr\n";
					}
					$sth->finish();
					$sth2->finish();		    
				}
			}
		}
	}
}

# TC_FAMILY
#+----------------------+------------------+------+-----+---------+-------+
#| Field                | Type             | Null | Key | Default | Extra |
#+----------------------+------------------+------+-----+---------+-------+
#| family               | int(16) unsigned |      | PRI | 0       |   A   |
#| individual           | int(16) unsigned | YES  |     | NULL    |       |
#| companionship        | int(16) unsigned | YES  |     | NULL    |       |
#| scheduling_priority  | int(10) unsigned | YES  |     | 30      |       |
#| valid                | tinyint(1)       | YES  |     | NULL    |       |
#+----------------------+------------------+------+-----+---------+-------+
sub update_tc_family_table
{
	print "\n-> Updating tc_family table\n";

	# Set all records to be invalid. Only mark them as valid if they appear on the new list.
	$sth = $dbh->prepare("update tc_family set valid=0 and companionship=0");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";

	# find head of households in tc_individual
	$sth = $dbh->prepare("SELECT * FROM tc_individual WHERE hh_position='Head of Household' and valid=1");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";
	my @individual_data = ();
	while ($sqlhashref = $sth->fetchrow_hashref) { push(@individual_data, $sqlhashref); }
	my $individual_count = scalar @individual_data;
	for($i=0;$i<$individual_count;$i++) {
		$individual = $individual_data[$i]{'individual'};
		$name = $individual_data[$i]{'name'};
		
		$sth2 = $dbh->prepare("SELECT * FROM tc_family WHERE individual='$individual'");
		$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		
		my @data = ();
		while($sqlhashref2 = $sth2->fetchrow_hashref) { push(@data, $sqlhashref2); }
		my $rows = scalar @data;

		if($rows == 0) {
			# No existing records found for this family, make a new entry
			print "   Adding new Family: $name\n";
			$sth2 = $dbh->prepare("INSERT INTO tc_family VALUES (NULL,'$individual','0',NULL,1)");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		} elsif($rows == 1) {
			# An existing record was found for this family, update it
			print "   Updating existing family: $name\n";
			$sth2 = $dbh->prepare("UPDATE tc_family SET valid='1' WHERE individual='$individual'");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		} else {
			# More than one record was found. Error! This shouldn't happen.
			print "   -E- More than one record found ($rows) for family name: $name\n";
		}
		
		# Now update the hometeaching field for this family
		foreach $index (keys %hometeaching_data)
		{
			$hashref = $hometeaching_data{$index};
			foreach $key (keys %$hashref) {
				if($hometeaching_data{$index}{'Household'} =~ /(\S+)\s+(\S+),\s+(\S+)\s+(.*)/) {
					$a = $1; $b = $2; $c = $3; $d = $4;
					if($name =~ /$a/ && $hometeaching_data{$index}{'Household'} !~ /$name/i) { 
						print "I: Adjusting hometeaching match from: $hometeaching_data{$index}{'Household'} to $a, $c $d\n";
						$hometeaching_data{$index}{'Household'} = "$a, $c $d";
					}
				}
				if($key =~ /Quorum/i &&
				   $hometeaching_data{$index}{$key} =~ /Elders/i &&
				   $hometeaching_data{$index}{'Household'} =~ /$name/i &&
				   $data[0]->{companionship} != $hometeaching_data{$index}{'Comp ID'}
				  )
				{
					print "   Updating hometeaching assignment for $name family\n";
					$companionship = $hometeaching_data{$index}{'Comp ID'};
					$sth2 = $dbh->prepare("update tc_family set companionship='$companionship' where individual='$individual'");
					$sth2->execute or die "-E- DB error: $DBI::errstr\n";
				}
			}
		}
		$sth->finish();
	}
}

# TC_VISIT
#+----------------+------------------+------+-----+---------+-------+
#| Field          | Type             | Null | Key | Default | Extra |
#+----------------+------------------+------+-----+---------+-------+
#| visit          | int(16) unsigned |      | PRI | 0       |   A   |
#| family         | int(16) unsigned | YES  | UNI | NULL    |       |
#| companionship  | int(16) unsigned | YES  |     | NULL    |       |
#| date           | date             | YES  |     | NULL    |       |
#| notes          | varchar(128)     | YES  |     | NULL    |       |
#| visited        | varchar(1)       | YES  |     | NULL    |       |
#+----------------+------------------+------+-----+---------+-------+
sub update_tc_visit_table
{
	print "\n-> updating tc_visit table\n";
	
	my $month_header_retrieved = 0;
	my $month_header;
	my @data_months;
	my %months = ('Jan', 1, 'Feb', 2, 'Mar', 3, 'Apr', 4, 'May', 5, 'Jun', 6, 'Jul', 7, 'Aug', 8, 'Sep', 9, 'Oct', 10, 'Nov', 11, 'Dec', 12);
	($second, $minute, $hour, $dayOfMonth, $month, $yearOffset, $dayOfWeek, $dayOfYear, $daylightSavings) = localtime();
	my %visit_status = ('X', 'y', '-', 'n', '', '');
	
	foreach $index (keys %hometeaching_stats_data)
	{
		$hashref = $hometeaching_stats_data{$index};
		#foreach $key (keys %$hashref) {print "$key\n";}
		
		$family_name = $hometeaching_stats_data{$index}{"Preferred Name"};
		print "   Updating visit data: $family_name\n";

		# get family id from tc_family
		$sth = $dbh->prepare("SELECT * FROM tc_family AS tf JOIN tc_individual AS ti WHERE tf.individual=ti.individual AND ti.name=\"$family_name\" AND tf.valid=1");
		$sth->execute or die "-E- DB error: $DBI::errstr\n";
		my @family_data = ();
		while($sqlhashref = $sth->fetchrow_hashref) { push(@family_data, $sqlhashref); }
		my $family_rows = scalar @family_data;
		if($family_rows > 0) { 
			$family_id = $family_data[0]->{'family'}; 
			$comp_id = $family_data[0]->{'companionship'};
		}
		else { next; }
		#print "family_id = $family_id\n";
		#print "comp_id = $comp_id\n";
		
		# ignore visits that weren't done by the quorum
		if ($comp_id == 0) { next; }
		
		# retrieve the month header if not already done
		if ($month_header_retrieved == 0)
		{
			foreach $key (keys %$hashref) 
			{
				if (($key ne "Preferred Name") && ($key ne "Home Teachers"))
				{
					$month_header = $key;
					@data_months = split /\t/, $key;
				}
			}
			$month_header_retrieved = 1;
		}
		
		# loop through history data
		@history = split /\t/, $hometeaching_stats_data{$index}{$month_header};
		my $data_year = 1900 + $yearOffset;
		my $data_month = $months{$data_months[-1]};
		#print "$month_header\n";
		#print $hometeaching_stats_data{$index}{$month_header};
		#print "\n";
		foreach $i (reverse(0..$#history)) {
			# went back a calendar year, decrement $data_year
			if ($months{$data_months[$i]} > $data_month)
			{
				$data_year -= 1;
			}
			$data_month = $months{$data_months[$i]};
			my $visit_date = sprintf("%4d-%02d-01\n", $data_year, $data_month);
			#print "$visit_date\n";
			my $importing_status = $visit_status{$history[$i]};
			#print "importing_status = $importing_status\n";
			#print "select * from tc_visit where family=$family_id and companionship=$comp_id and date='$visit_date'\n";
			$sth = $dbh->prepare("select * from tc_visit where family=$family_id and companionship=$comp_id and date='$visit_date'");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
			my @visit_data = ();
			while($sqlhashref = $sth->fetchrow_hashref) { push(@visit_data, $sqlhashref); }
			my $visit_rows = scalar @visit_data;
			if($visit_rows > 0) { 
				my $visited = $visit_data[0]->{'visited'}; 
				#print "visited = $visited\n";
				# update visit if data is different in tc_visit
				if ($visited ne $importing_status)
				{
					#print "importing_status = $importing_status\n";
					$sth = $dbh->prepare("update tc_visit set visited='$importing_status' where family='$family_id' and date='$visit_date' and companionship='$comp_id'");
					$sth->execute or die "-E- DB error: $DBI::errstr\n";
				}
			} else {
				if ($importing_status ne '')
				{
					# add visit if it doesn't exist in tc_visit
					$sth = $dbh->prepare("insert into tc_visit values (NULL, '$family_id', '$comp_id', '', '', '$visit_date', '', '$importing_status', 'hometeaching')");
					$sth->execute or die "-E- DB error: $DBI::errstr\n";
				}
			}
		}
	}
}

######################################################################
sub check_for_changed_ids
{
	# If the Indiv ID & HofH ID has changed between data sets, we could have problems
	my ($oldhashref, $newhashref) = @_;
	my $found_problem = 0;

	foreach $oldindex (keys %$oldhashref)
	{
		$mls_id = $oldhashref->{$oldindex}{'Indiv ID'};
		$hofh_id  = $oldhashref->{$oldindex}{'HofH ID'};
		$full_name = $oldhashref->{$oldindex}{'Full Name'};
		$hh_position = $oldhashref->{$oldindex}{'HH Position'};
		if($hh_position =~ /Other/i) { next; }

		foreach $newindex (keys %$newhashref)
		{
			if($newhashref->{$newindex}{'Full Name'} eq $full_name &&
			   $mls_id != $newhashref->{$newindex}{'Indiv ID'})
			{
				print "-W- Indiv ID for $full_name changed from $mls_id to $newhashref->{$newindex}{'Indiv ID'}\n";
				$found_problem = 1;
			}

			if($newhashref->{$newindex}{'Full Name'} eq $full_name &&
			   $hofh_id != $newhashref->{$newindex}{'HofH ID'})
			{
				print "-W- HofH ID for $full_name changed from $hofh_id to $newhashref->{$newindex}{'HofH ID'}\n";
				$found_problem = 1;
			}
		}
	}

	return $found_problem;
}

sub update_organization_class_data
{
	print "\n-> Updating organization class info in tc_individual table\n";

	foreach $index (keys %organization_class_data)
	{
		# get name and organization info for each individual
		$name = $organization_class_data{$index}{'Preferred Name'};
		$org_class = $organization_class_data{$index}{'Organization Class'};

		if ($org_class =~ m/Elder/i) {
			#print "   $name:  Elder\n";
			$sth = $dbh->prepare("update tc_individual set steward='Elder' where name=\"$name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
		}
		if ($org_class =~ m/High Priest/i) {
			#print "   $name:  High Priest\n";
			$sth = $dbh->prepare("update tc_individual set steward='High Priest' where name=\"$name\"");
			$sth->execute or die "-E- DB error: $DBI::errstr\n";
		}
	}
}

sub update_tc_scheduling_priority_table
{
	print "\n-> Updating scheduling priority table\n";
	
	# individuals
	$sth = $dbh->prepare("select * from tc_individual where steward='$default_stewardship' and valid=1");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";
	while($sqlhashref = $sth->fetchrow_hashref) {
		$individual = $sqlhashref->{individual};
		$scheduling_priority = $sqlhashref->{scheduling_priority};
		if ($scheduling_priority == 'NULL')
		{
			$sth2 = $dbh->prepare("insert into tc_scheduling_priority values (NULL, 30, '')");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
			$scheduling_priority = $dbh->last_insert_id(NULL,NULL,'tc_scheduling_priority',NULL);
			$sth2 = $dbh->prepare("update tc_individual set scheduling_priority=$scheduling_priority where individual=$individual");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		}
	}
	&remove_obsolete_scheduling_priority("tc_individual");
	
	# families
	$sth = $dbh->prepare("select tf.scheduling_priority, tf.family from tc_family AS tf JOIN tc_individual AS ti ON tf.individual=ti.individual and ti.steward='$default_stewardship' and tf.valid=1");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";
	while($sqlhashref = $sth->fetchrow_hashref) {
		$family = $sqlhashref->{family};
		$scheduling_priority = $sqlhashref->{scheduling_priority};
		#print "$family   $scheduling_priority\n";
		if ($scheduling_priority == 'NULL')
		{
			$sth2 = $dbh->prepare("insert into tc_scheduling_priority values (NULL, 30, '')");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
			$scheduling_priority = $dbh->last_insert_id(NULL,NULL,'tc_scheduling_priority',NULL);
			$sth2 = $dbh->prepare("update tc_family set scheduling_priority=$scheduling_priority where family=$family");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		}
	}
	&remove_obsolete_scheduling_priority("tc_family");
	
	# companionships
	$sth = $dbh->prepare("select tc.individual, tc.scheduling_priority from tc_companionship AS tc JOIN tc_individual AS ti ON tc.individual=ti.individual and (ti.steward='$default_stewardship' or ti.steward='') and tc.valid=1");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";
	while($sqlhashref = $sth->fetchrow_hashref) {
		$individual = $sqlhashref->{individual};
		$scheduling_priority = $sqlhashref->{scheduling_priority};
		#print "$individual   $scheduling_priority\n";
		if ($scheduling_priority == 'NULL')
		{
			$sth2 = $dbh->prepare("insert into tc_scheduling_priority values (NULL, 30, '')");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
			$scheduling_priority = $dbh->last_insert_id(NULL,NULL,'tc_scheduling_priority',NULL);
			$sth2 = $dbh->prepare("update tc_companionship set scheduling_priority=$scheduling_priority where individual=$individual");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		}
	}
	&remove_obsolete_scheduling_priority("tc_companionship");
}

sub remove_obsolete_scheduling_priority
{
	my $table_name = $_[0];

	#print "\n-> Cleaning $table_name\n";
	
	#$sth = $dbh->prepare("SELECT scheduling_priority FROM $table_name where scheduling_priority IS NOT NULL AND valid=0");
	$sth = $dbh->prepare("SELECT * FROM $table_name WHERE valid=0");
	$sth->execute or die "-E- DB error: $DBI::errstr\n";
	while($sqlhashref = $sth->fetchrow_hashref) {
		$scheduling_priority = $sqlhashref->{scheduling_priority};
		$individual = $sqlhashref->{individual};
		#$name = $sqlhashref->{name};
		if ($scheduling_priority != "NULL") {
			#print "$name\n";
			# set scheduling_priority to NULL
			#print "UPDATE $table_name SET scheduling_priority=NULL WHERE individual=$individual\n";
			$sth2 = $dbh->prepare("UPDATE $table_name SET scheduling_priority=NULL WHERE individual=$individual");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
			
			# remove entry from tc_scheduling_priority
			#print "DELETE FROM tc_scheduling_priority WHERE scheduling_priority=$scheduling_priority\n";
			$sth2 = $dbh->prepare("DELETE FROM tc_scheduling_priority WHERE scheduling_priority=$scheduling_priority");
			$sth2->execute or die "-E- DB error: $DBI::errstr\n";
		}
	}
}

######################################################################
# MAIN
######################################################################

###################################################
# Open a connection to the database
$dbh=DBI->connect("dbi:mysql:dbname=$dbname:host=$dbhost:port=$dbport",$dbuser,$dbpass,{
    AutoCommit=>0,
    PrintError=>0}) or print "Connect Failure:".$DBI::errstr."\n" and exit 2;

###################################################
# Check old directory against new directory to ensure
# that the Indiv ID & HofH ID have not changed between updates
if(defined $opt_o) {
	print "-> Comparing old data files to new ones: $opt_o => $opt_n\n";
	my %old_membership_data = ();
	my %new_membership_data = ();
	&csv_to_hash("$opt_o/Membership.csv",\%old_membership_data);
	&csv_to_hash("$opt_n/Membership.csv",\%new_membership_data);

	$changed_ids=&check_for_changed_ids(\%old_membership_data, \%new_membership_data);

	if($changed_ids) {
		print "\n";
		print "-E- Some Indiv IDs and HofH IDs have changed for Head of Households between \n";
		print "    $opt_o and $opt_n data sets.\n";
		print "    This script is not currently setup to handle this properly.\n";
		print "\n";
		print "    Exiting without updating...\n\n";
		exit;
	}
}

###################################################
# Process command line options
our $datadir;
if(defined $opt_n) { $datadir = $opt_n; }
else { $datadir = shift(@ARGV); }
print "\n-> Processing all ward data files in $datadir\n";

###################################################
# Parse Ward Data Files
&optional_csv_to_hash("$datadir/Organization\ class\ per\ member.csv", \%organization_class_data);
&csv_to_hash("$datadir/Membership.csv",\%membership_data);
&csv_to_hash("$datadir/HomeTeaching.csv",\%hometeaching_data);
&csv_to_hash("$datadir/Organization.csv",\%organization_data);
&optional_csv_to_hash("$datadir/Home\ Teacher\ per\ Companionship.csv", \%hometeaching_stats_data);
%organization_by_name = ();
%organization_by_id = ();

if($opt_v) {
	print "-> Membership Data Dump\n\n";
	&print_hash(\%membership_data);
	print "-> HomeTeaching Data Dump\n\n";
	&print_hash(\%hometeaching_data);
	print "-> Organization Data Dump\n\n";
	&print_hash(\%organization_data);
	print "-> HomeTeaching Stats Data Dump\n\n";
	&print_hash(\%hometeaching_stats_data);
}

if($opt_s) { $dbh->disconnect(); exit; }

# Now update the various DB tables
&update_tc_calling_table();
&update_tc_individual_table();
&update_tc_companionship_table();
&update_tc_family_table();
&update_tc_visit_table();
&update_organization_class_data();
&update_tc_scheduling_priority_table();

print "\n-> Import Successful! DONE...\n";

###################################################
# Disconnect from the database
$dbh->disconnect();

######################################################################


